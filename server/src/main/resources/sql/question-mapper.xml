<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="info.keik.tiple.repository.QuestionRepository">

  <select id="get" resultMap="get-map">
    SELECT
      question.id,
      question.title,
      question.content,
      question.votes_count,
      question.created_by,
      question.created_at,
      tag.name AS tname
    FROM question
    JOIN question_tag ON question.id = question_tag.question_id
    JOIN tag ON question_tag.tag_id = tag.id
    WHERE question.id = #{id}
  </select>
  <resultMap id="get-map" type="info.keik.tiple.model.Question">
    <id property="id" column="id" />
    <result property="title" column="title" />
    <result property="content" column="content" />
    <result property="votesCount" column="votes_count" />
    <result property="createdBy.id" column="created_by" />
    <result property="createdAt" column="created_at" />
    <collection property="tags" ofType="info.keik.tiple.model.Tag">
      <result property="name" column="tname" />
    </collection>
  </resultMap>

  <select id="search" resultMap="search-map">
    SELECT
      q.id,
      q.title,
      q.content,
      q.views_count,
      q.votes_count,
      count(DISTINCT answer.id) as answers_count,
      q.created_at,
      q.created_by,
      tag.name AS tname
    FROM (
      SELECT
        question.id,
        question.title,
        question.content,
        question.views_count,
        question.votes_count,
        question.created_at,
        question.created_by
      FROM question
      LEFT JOIN question_tag ON question.id = question_tag.question_id
      LEFT JOIN tag ON question_tag.tag_id = tag.id
      <if test="tagName != null">
        WHERE tag.name = #{tagName}
      </if>
      GROUP BY question.id
      LIMIT #{begin}, #{count}
    ) q
    LEFT JOIN question_tag ON q.id = question_tag.question_id
    LEFT JOIN tag ON question_tag.tag_id = tag.id
    LEFT JOIN answer ON q.id = answer.answer_for
    GROUP BY q.id
    ORDER BY q.id
  </select>
  <resultMap id="search-map" type="info.keik.tiple.model.Question">
    <id property="id" column="id" />
    <result property="title" column="title" />
    <result property="content" column="content" />
    <result property="viewsCount" column="views_count" />
    <result property="votesCount" column="votes_count" />
    <result property="answersCount" column="answers_count" />
    <result property="createdBy.id" column="created_by" />
    <result property="createdAt" column="created_at" />
    <result property="updatedBy.id" column="updated_at" />
    <collection property="tags" ofType="info.keik.tiple.model.Tag">
      <result property="name" column="tname" />
    </collection>
  </resultMap>

  <select id="count" resultType="Integer">
    SELECT COUNT(DISTINCT question.id)
    FROM question
    JOIN question_tag ON question.id = question_tag.question_id
    JOIN tag ON question_tag.tag_id = tag.id
    <if test="tagName != null">
      WHERE tag.name = #{tagName}
    </if>
  </select>

  <update id="addViewsCount">
    UPDATE question
    SET views_count = views_count + 1
    WHERE id = #{id};
  </update>

  <select id="getVote" resultType="Integer">
    SELECT value
    FROM vote_for_question
    WHERE vote_for = #{id}
      AND created_by = #{userId}
  </select>

  <insert id="updateVote">
    INSERT INTO vote_for_question (
      vote_for,
      created_by,
      value
    )
    VALUES (
      #{id},
      #{userId},
      #{value}
    )
    ON DUPLICATE KEY UPDATE
      value = #{value}
  </insert>

</mapper>
